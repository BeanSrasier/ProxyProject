#!/usr/bin/env python3

"""
Proxy Project
"""

from socket import socket
import os
from select import select

def server(port):
    """Main"""
    sock = socket() #default is AF_INET, SOCK_STREAM
    sock.bind(('localhost', port))
    sock.listen(5)
    while True:
        try:
            clnt_sock, _ = sock.accept()
        except KeyboardInterrupt:
            break
        clnt_sock.set_inheritable(True)
        if os.fork() == 0: #child process (0)
            child_sock = socket()
            try:
                child(clnt_sock, child_sock)
            except KeyboardInterrupt:
                pass
            child_sock.close()
            clnt_sock.close()
            os._exit(0) #pylint: disable=protected-access
        clnt_sock.close()
        while os.waitpid(-1, os.WNOHANG) != (0, 0):
            pass
    sock.close()

def child(clnt_sock, serv_sock):
    """Child process"""
    msg, headers = parse_headers(clnt_sock)
    host = headers['host'].split(':')
    address = host[0]
    if len(host) == 2: #contains port number
        port = int(host[1])
    else:
        port = 80
    #recv from client (web browser) and send to server (web server)
    serv_sock.connect((address, port))
    total_bytes = 0
    end_found = check_end(headers, msg)
    while not end_found or total_bytes < len(msg):
        if not end_found and total_bytes < len(msg):
            recv, send, _ = select([clnt_sock], [serv_sock], [])
            if recv:
                msg += clnt_sock.recv(4096)
                end_found = check_end(headers, msg)
            if send:
                total_bytes += serv_sock.send(msg[total_bytes:])
        elif not end_found:
            msg += clnt_sock.recv(4096)
            end_found = check_end(headers, msg)
        else:
            total_bytes += serv_sock.send(msg[total_bytes:])
    #recv from server (web server) and send to client (web browser)
    msg, headers = parse_headers(serv_sock)
    total_bytes = 0
    end_found = check_end(headers, msg)
    while not end_found or total_bytes < len(msg):
        if not end_found and total_bytes < len(msg):
            recv, send, _ = select([serv_sock], [clnt_sock], [])
            if recv:
                msg += serv_sock.recv(4096)
                end_found = check_end(headers, msg)
            if send:
                total_bytes += clnt_sock.send(msg[total_bytes:])
        elif not end_found:
            msg += serv_sock.recv(4096)
            end_found = check_end(headers, msg)
        else:
            total_bytes += clnt_sock.send(msg[total_bytes:])

def check_end(headers, msg):
    """Check for end of body"""
    if 'transfer-encoding' in headers and headers['transfer-encoding'] == 'chunked':
        body = msg.split(b'\r\n\r\n')[1]
        current_position = 0
        while current_position < len(body):
            #split on first instance of '\r\n'
            index_after_size = body.find(b'\r\n', current_position)
            if index_after_size == -1:
                return False
            chunk_size = int(body[current_position:index_after_size], 16)
            if chunk_size == 0 and len(body) == index_after_size + 4:
                return True
            current_position = index_after_size + chunk_size + 4
        return False
    elif 'content-length' in headers:
        if int(headers['content-length']) > len(msg.split(b'\r\n\r\n')[1]):
            return False
        return True
    return True

def parse_headers(sock):
    """Parse Headers"""
    msg = b''
    headers = {}
    while b'\r\n\r\n' not in msg:
        msg += sock.recv(4096)
    #convert byte string to acscii
    headerlines = msg.split(b'\r\n\r\n')[0].decode('US-ASCII').split('\r\n')
    print(headerlines[0])
    for line in headerlines[1:]:
        print(line)
        header = line.split(':', 1) #split on first instance of ':'
        if len(header) == 2:
            headers[header[0].strip().lower()] = header[1].strip() #strip whitespace
    return msg, headers

if __name__ == '__main__':
    import sys
    if len(sys.argv) == 2:
        server(int(sys.argv[1]))
    else:
        print('incorrect parameters')
